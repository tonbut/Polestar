<!--
   Copyright 2015 1060 Research Ltd

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<module version="2.0">
	<meta>
		<identity>
			<uri>urn:io:polestar</uri>
			<version>0.5.6</version>
		</identity>
		<info>
			<name>Polestar IoT Hub</name>
			<description></description>
		</info>
	</meta>
	<system>
		<dynamic/>
		<classloader>
			<exports>
				<match>io\.polestar\.api\.*</match>
				<match>io\.polestar\.data\.api.*</match>
				<match>io\.polestar\.data\.scripts.*</match>
				<match>io\.polestar\.data\.db.*</match>
			</exports>
		</classloader>
	</system>
	<rootspace name="Polestar / Public ">
		<literal uri="res:/etc/system/SimpleDynamicImportHook.xml" type="xml">
			<connection>
				<type>PolestarWeb</type>
				<type>HTTPFulcrum2</type>
				<type>HTTPFulcrum</type>
				<type>HTTPFulcrumInsecure</type>
			</connection>
		</literal>
		<branch-merge>
			<config>res:/io/polestar/view/config/BranchMerge.xml</config>
			<space>
				<mapper>
					<config>res:/io/polestar/view/config/Mappings.xml</config>
					<space>
						<fileset>
							<id>polestar:statics</id>
							<regex>res:/io/polestar/view/.*</regex>
						</fileset>
						<import>
							<uri>urn:io:polestar:data</uri>
						</import>
						<import>
							<uri>urn:org:netkernel:ext:layer1</uri>
						</import>
						<import>
							<uri>urn:org:netkernel:mod:hds</uri>
						</import>
						<import>
							<uri>urn:org:netkernel:xml:core</uri>
						</import>
						<import>
							<uri>urn:org:netkernel:lang:groovy</uri>
						</import>
						<import>
							<uri>urn:org:netkernel:mod:wfw</uri>
						</import>
					</space>
				</mapper>
				<import>
					<uri>urn:org:netkernel:lang:xrl</uri>
					<private/>
				</import>
				<import>
					<uri>urn:org:netkernel:tpt:http</uri>
					<private/>
				</import>
				<import>
					<uri>urn:org:netkernel:ext:layer1</uri>
					<private/>
				</import>
				<import>
					<uri>urn:org:netkernel:mod:security</uri>
					<private/>
				</import>
			</space>
		</branch-merge>
		<import>
			<uri>urn:io:polestar:grafana</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:ext:layer1</uri>
			<private/>
		</import>
	</rootspace>

	<rootspace name="Polestar / Data " uri="urn:io:polestar:data" public="true">

		<!-- script stuff -->
		<endpoint>
			<id>polestar:data:scriptData</id>
			<grammar>res:/md/script/
				<optional>
					<group name="id"><regex type="alphanum"/></group>
					<optional>#<group name="fragment"><regex type="nmtoken"/></group></optional>
				</optional>
			</grammar>
			<class>io.polestar.data.scripts.ScriptDataAccessor</class>
		</endpoint>
		<endpoint>
			<id>polestar:data:scriptExecute</id>
			<grammar>res:/md/execute/
				<choice>
					<group name="id"><regex type="alphanum"/></group>
					<group>named/<group name="named"><regex type="anything"/></group></group>
				</choice>
			</grammar>
			<class>io.polestar.data.scripts.ExecuteScriptAccessor</class>
		</endpoint>
		<endpoint>
			<id>polestar:data:scriptExecuteActive</id>
			<grammar><active>
				<identifier>active:polestarExecuteScript</identifier>
				<argument min="0" name="script"/>
				<argument min="0" name="name"/>
				<varargs/>
			</active></grammar>
			<class>io.polestar.data.scripts.ExecuteScriptAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:listScripts</id>
			<grammar>
				<active>
					<identifier>active:polestarListScripts</identifier>
				</active>
			</grammar>
			<class>io.polestar.data.scripts.ListScriptsAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:pollingState</id>
			<grammar><active>
				<identifier>active:polestarPollingState</identifier>
			</active></grammar>
			<class>io.polestar.data.poll.PollingStateAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:scriptExecutionState</id>
			<grammar><active>
				<identifier>active:polestarScriptExecutionUpdate</identifier>
				<identifier>active:polestarScriptExecutionStatus</identifier>
				<identifier>active:polestarScriptExecutionReset</identifier>
				<argument name="id" min="0"/>
				<argument name="error" min="0"/>
				<argument name="edit" min="0"/>
			</active></grammar>
			<class>io.polestar.data.scripts.ScriptExecutionDataAccessor</class>
		</endpoint>

		<!-- sensor stuff -->
		<endpoint>
			<id>polestar:data:sensor</id>
			<grammar><active>
				<identifier>active:polestarSensorConfig</identifier>
				<identifier>active:polestarSensorState</identifier>
				<identifier>active:polestarSensorChanges</identifier>
				<identifier>active:polestarSensorUpdate</identifier>
				<identifier>active:polestarSensorReadingCheck</identifier>
				<identifier>active:polestarSensorStatePersist</identifier>
				<identifier>active:polestarSensorInfo</identifier>
				<identifier>active:polestarSensorInfoDelete</identifier>
				<identifier>active:polestarSensorStateRefresh</identifier>
				<identifier>active:polestarSensorRegenerate</identifier>
				<argument name="state" min="0"/>
			</active></grammar>
			<class>io.polestar.data.sensors.SensorListAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:error</id>
			<grammar><active>
				<identifier>active:polestarSensorErrorInfo</identifier>
				<identifier>active:polestarSensorErrorList</identifier>
				<argument name="id" min="0"/>
				<argument name="duration"/>
			</active></grammar>
			<class>io.polestar.data.sensors.SensorErrorAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:scriptTriggers</id>
			<grammar>
				<active>
					<identifier>active:polestarScriptTriggers</identifier>
				</active>
			</grammar>
			<class>io.polestar.data.scripts.ScriptTriggersAccessor</class>
		</endpoint>

		<endpoint>
			<id>polestar:data:sensor:backup</id>
			<grammar><active>
				<identifier>active:polestarSensorBackupInfo</identifier>
				<identifier>active:polestarSensorBackup</identifier>
				<identifier>active:polestarSensorRestoreInfo</identifier>
				<identifier>active:polestarSensorRestore</identifier>
				<identifier>active:polestarSensorBRStatus</identifier>
				<identifier>active:polestarSensorBackupDownload</identifier>
				<argument name="operator" min="0"/>
			</active></grammar>
			<class>io.polestar.data.sensors.SensorBackupAccessor</class>
		</endpoint>

		<!-- authentication stuff -->
		<endpoint>
			<id>polestar:data:authenticationData</id>
			<grammar>res:/md/authentication
			</grammar>
			<class>io.polestar.data.login.AuthenticationDataAccessor</class>
		</endpoint>

		<!-- log stuff -->
		<endpoint>
			<id>polestar:data:logCleanup</id>
			<grammar><active>
				<identifier>active:polestarLogCleanup</identifier>
			</active></grammar>
			<class>io.polestar.data.log.LogCleanupAccessor</class>
		</endpoint>
		<endpoint>
			<id>polestar:data:logQuery</id>
			<grammar><active>
				<identifier>active:polestarLogQuery</identifier>
				<argument name="operator" min="0"/>
			</active></grammar>
			<class>io.polestar.data.log.LogQueryAccessor</class>
		</endpoint>

		<mapper>
			<config>res:/io/polestar/data/config/Mappings.xml</config>
			<space>
				<fileset>
					<id>polestar:datastatics</id>
					<regex>res:/io/polestar/data/.*</regex>
				</fileset>
			</space>
		</mapper>

		<endpoint>
			<private/>
			<class>io.polestar.data.db.PersistenceFactory</class>
		</endpoint>

		<import>
			<uri>urn:org:netkernel:ext:layer1</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:mod:hds</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:lang:groovy</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:client:http</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:mod:security</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:email:core</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:web:core</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:xml:core</uri>
		</import>
		<import>
			<uri>urn:org:netkernel:json:core</uri>
		</import>
		
		<!-- hack for tony to get Selenium to work -->
		
		<import>
			<uri>urn:org:netkernel:selenium:test</uri>
		</import>

		<endpoint>
			<prototype>SimpleImportDiscovery</prototype>
			<grammar>active:SimpleImportDiscovery</grammar>
			<type>Polestar</type>
		</endpoint>
		<endpoint>
			<prototype>DynamicImport</prototype>
			<config>active:SimpleImportDiscovery</config>
		</endpoint>

		<accessor>
			<grammar>
				<active>
					<identifier>active:polestarAvailableLanguages</identifier>
				</active>
			</grammar>
			<class>io.polestar.data.scriptRuntime.RuntimeLookupAccessor</class>
		</accessor>
	</rootspace>

	<rootspace name="Polestar / Cron">
		<fileset>
			<regex>res:/etc/system/CronConfig.xml</regex>
			<rewrite>res:/io/polestar/data/config/CronConfig.xml</rewrite>
		</fileset>
		<endpoint>
			<id>polestar:data:periodPoll</id>
			<grammar><active>
				<identifier>active:polestarPeriodPoll</identifier>
				<argument name="period"/>
			</active></grammar>
			<class>io.polestar.data.poll.PeriodPollAccessor</class>
		</endpoint>
		<import>
			<uri>urn:io:polestar:data</uri>
			<private/>
		</import>
	</rootspace>

	<rootspace name="Polestar / Grafana " uri="urn:io:polestar:grafana" public="false" private-filter="false">
		<endpoint>
			<id>polestar:grafana:jsonendpoint</id>
			<grammar>res:/
				<group name="type"><regex>(search|query|annotations|tag-keys|tag-values)</regex></group>
			</grammar>
			<class>io.polestar.grafana.JSONEndpoint</class>
		</endpoint>
		<import>
			<uri>urn:io:polestar:data</uri>
			<private/>
		</import>
		<import>
			<uri>urn:org:netkernel:json:core</uri>
			<private/>
		</import>
		<import>
			<uri>urn:org:netkernel:mod:hds</uri>
			<private/>
		</import>
	</rootspace>
</module>
