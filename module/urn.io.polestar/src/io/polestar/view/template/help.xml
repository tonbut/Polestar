<!--
   Copyright 2015 1060 Research Ltd

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<div class='container'>
	<h2>Introduction</h2>
	<p>Polestar is a general purpose Internet of Things sensor monitor, data logger, controller and hub.
	It is designed to be fully extensible on the fly with all configuration or scripting editable through the web interface
	it provides. 
	</p>
	<p>Polestar implements the following main concepts:
	<ul>
		<li><b>Sensors</b> may be physical or logical. Their values are updated by customisable scripts. Their
		values are stored in a database periodically.</li>
		<li><b>Scripts</b> define everything from what sensors are in the system to how those sensors are updated and control
		scripts acting on sensor values. Scripts can be automatically triggered based on state changes in the system or
		exposed as "webhooks" so external events can call them.</li>
		<li><b>Capture</b> all sensor values are captured every 5 minutes (soon to be configurable.) Scripts can use this historical data
		for analysis or visualisations.</li>
		<li><b>Logging</b> of important events from scripts.</li>
	</ul></p>
	<h2>Installation</h2>
	<p>Prerequisites - <a href="http://www.1060research.com/products/">NetKernel</a> and <a href="http://www.mongodb.org">MongoDB</a>.</p>
	<h3>Install NetKernel</h3>
	<p>Download NetKernel from <a href="http://www.1060research.com/resources/">1060research.com</a>. Polestar supports
	both NetKernel Standard Edition and Enterprise Edition. Follow the appropriate installation procedure.</p>
	<p>Go to the apposite tool on management console: <a href="http://localhost:1060/tools/apposite/">http://localhost:1060/tools/apposite/</a> and apply all available updates.</p>
	<p>Also select and install the following packages:
	<ul>
		<li>hds-g2</li>
		<li>email-core</li>
	</ul></p>
	<p><div class="label label-info">optional</div> Configure NetKernel to <a href="http://docs.netkernel.org/book/view/book:system:admin/doc:sysadmin:service">run as a service</a>.</p>
	<h3>Install MongoDB</h3>
	<p>Install using the instructions provided on the <a href="http://docs.mongodb.org/manual/installation">Mongo DB Site</a>.
	MongoDB can be run as a service or on the commandline. For deployment of the system as a server it
	is better to install as a service. Polestar expects to find MongoDB on it's default port 27017 on localhost.</p>
	<h3>Install Polestar</h3>
	<p>Clone the git repository</p>
	<p>Use <a href="https://www.gradle.org/">gradle</a> and the <a href="http://docs.netkernel.org/book/view/book:org:netkernel:gradle:plugin:book/">NetKernel Gradle Plugin</a> to build Polestar. (I hope to get pre-built builds up on github soon.)</p>
	<p>Deploy the Polestar jar on NetKernel. Copy the jar to a suitable location then edit [netkernel]/etc/modules.xml. Add a reference to the Polestar jar.</p>
	<h3>Change passwords</h3>
	<p>Polestar should now be running. Connect to it on <kbd>http://[hostname]:8080/polestar/</kbd> where [hostname] is the
	hostname of the server where you have installed it.</p>
	<p>You should be prompted for a username and password. There are two usernames hardcoded.
	One is "admin", the other is "guest". Both have the password "password". You should log into admin and change them both.
	The guest account has readonly access and can only execute scripts marked as public or guest. It can only view scripts not marked as secret. The admin account has full access.
	</p>
	<p>Change the password by appending altering the URL in your address bar, i.e.  <kbd>http://[hostname]:8080/polestar/changePassword</kbd>
	You will be prompted to enter your new password twice. Don't forget it. If you do the only way to reset
	it is to delete the database and start again. (Actually not quite true, you can just drop the collection named
	"authentication".)
	</p>
	<h3>Configuration script</h3>
	<div class="alert alert-info">
		<p><b>Everything in Polestar is driven by scripts.</b></p>
		<p>We hope to have a set of standard scripts initialised when Polestar is installed. At the moment
		you can manually create scripts from the information in this guide.</p>
		<p>We hope to have a set of standard scripts either installed by default or available in the repo. At the
		moment you must manually create them to seed Polestar.</p>
		<p>All the scripts are coded using the <a href="http://groovy.codehaus.org/">Groovy</a> programming language.</p>
	</div>
	
	<p>The first script you need to know about is the
	the configuration script.  Create it by click on Scripts in
	the navigation bar and the clicking the <span class="label label-primary">+New</span> button. It must be named "Configuration".</p>
	<pre><code>import org.netkernel.mod.hds.*;
import org.netkernel.layer0.nkf.*;
m=HDSFactory.newDocument()
	.addNode("title","Tony's Deathstar")
	.addNode("subtitle","deathstar automation!")
	.addNode("icon","/polestar/pub/icon/deathstar.png")
	.addNode("show-script-triggers",false)
	.addNode("logRetentionPeriod",1000L*60*60*24*7)
	.pushNode("sensor-ticker")
	.addNode("period",1000L*60*60*24*1)
	.addNode("samplePeriod",1000L*60*60);
context.createResponseFrom(m.toDocument(false));</code></pre>
	<p>Optional title, subtitle and icon fields in the configuration are used to customise the navigation bar branding.
	Sensor-ticker period and samplePeriod are used to customise the ticker shown in the sensor view.
	</p>
	<h3>Configuring sensors</h3>
	<p>Sensors are defined by the sensor script. This is a script named "SensorList".
	Here is a template with a single sensor:</p>
	<pre><code>import org.netkernel.mod.hds.*;
m=HDSFactory.newDocument()
	.pushNode("sensors")
	.pushNode("sensor")
	.addNode("id","urn:random1")
	.addNode("name","Random 1")
	.addNode("units","")
	.addNode("format","%.2f")
	.addNode("icon","/polestar/pub/icon/sun.png")
	.addNode("keywords","test")
	.addNode("errorIfNoReadingsFor",800L);
context.createResponseFrom(m.toDocument(false));</code></pre>
	<p>There are seven fields that can be defined for each sensor, let us go through them:
	<ul>
		<li><b>id</b> <span class="label label-info">mandatory</span> Each sensor must have a unique URN (universal resource name)</li>
		<li><b>name</b> <span class="label label-info">mandatory</span> This is the human readable display name of the sensor.</li>
		<li><b>units</b> <span class="label label-info">optional</span> This specifies the display units of the sensors values.</li>
		<li><b>format</b> <span class="label label-info">optional</span> Format is used to format the raw sensor values for display.
		Boolean values can use "on" for on/off or "open" for open/close. 
		Formats containing the percent character are formatted according to the specifications on this <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html">page</a>.</li>
		<li><b>icon</b> <span class="label label-info">optional</span> Specifies a custom icon URL. There is a library of icons within
		Polestar. (See below.)</li>
		
		<li><b>chart-period</b> <span class="label label-info">optional</span> Specifies default displayed period of chart in sensor detail view. Can be hour|day|week|month|year.</li>
		<li><b>chart-type</b> <span class="label label-info">optional</span> Specifies type of rendering of chart in sensor detail view. Can be analog|discrete|stacked|count.
		 Count causes value to be rendered as incremental change. Discrete causes both numeric and maps to be rendered as bar chart. Stacked causes
		 map values to rendered in bar stack.</li>
		
		<li><b>keywords</b> <span class="label label-info">optional</span> Comma separated list of keywords that are display in sensor list and can be used to filter sensors.</li>
		<li><b>errorIfNoReadingsFor</b> <span class="label label-info">optional</span> An integer number of seconds after which an error will be reported in a sensor if it's
		value is not updated (regardless of if it's value changed) by a script.</li>
		<li><b>errorIfNotModifiedFor</b> <span class="label label-info">optional</span> An integer number of seconds after which an error will be reported in a sensor if it's
		value has not been modified.</li>
		<li><b>errorOnlyAfter</b> <span class="label label-info">optional</span> An integer number of seconds to wait after an error is raised on a sensor
		before reporting it. This is useful to avoid constant reporting of error transients that quickly resolve themselves.</li>

		<li><b>errorIfGreaterThan</b> <span class="label label-info">optional</span> A numeric value that is compared against the sensor value.
		If sensor value is numeric and it's value greater then this sensor is in error. To add hysteresis to this error you can an additional field
		of <b>errorClearIfLessThan</b>. The sensor will then remain in error status until the value falls below the value specified in this field.</li>
		<li><b>errorIfLessThan</b> <span class="label label-info">optional</span> A numeric value that is compared against the sensor value.
		If sensor value is numeric and it's value lesser then this sensor is in error. To add hysteresis to this error you can an additional field
		of <b>errorClearIfGreaterThan</b>. The sensor will then remain in error status until the value rises above falls the value specified in this field.</li>
		<li><b>errorIfEquals</b> <span class="label label-info">optional</span> A numeric or boolean value that is compared against the sensor value.
		If sensor value is equal then this sensor is in error.</li>
		<li><b>errorIfNotEquals</b> <span class="label label-info">optional</span> A numeric or boolean value that is compared against the sensor value.
		If sensor value is not equal then this sensor is in error.</li>
	</ul>
	</p>
	<h3>Icons</h3>
	<p>The following icons are built in. Use a URL of the form <code>/polestar/pub/icon/bell.png</code>. You can
	also use external images or create a Netkernel module with some icons exposed. Ideally icons should be 48x48 pixels.</p>
	<div>
  		<div class="micon"><img src="/polestar/pub/icon/bell.png"/><div class="caption">bell.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/circle-dashed.png"/><div class="caption">circle-dashed.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/co2.png"/><div class="caption">co2.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/deathstar.png"/><div class="caption">deathstar.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/door.png"/><div class="caption">door.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/electricity.png"/><div class="caption">electricity.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/fan.png"/><div class="caption">fan.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/fire.png"/><div class="caption">fire.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/gate.png"/><div class="caption">gate.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/humidity.png"/><div class="caption">humidity.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/lightbulb.png"/><div class="caption">lightbulb.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/motion.png"/><div class="caption">motion.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/network.png"/><div class="caption">network.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/person.png"/><div class="caption">person.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/polestar.png"/><div class="caption">polestar.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/pressure.png"/><div class="caption">pressure.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/radiator.png"/><div class="caption">radiator.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/rain.png"/><div class="caption">rain.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/security.png"/><div class="caption">security.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/shower.png"/><div class="caption">shower.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/snowflake.png"/><div class="caption">snowflake.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/socket.png"/><div class="caption">socket.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/sun.png"/><div class="caption">sun.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/switch.png"/><div class="caption">switch.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/temperature.png"/><div class="caption">temperature.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/wind.png"/><div class="caption">wind.png</div></div>

  		<div class="micon"><img src="/polestar/pub/icon/sound.png"/><div class="caption">sound.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/car.png"/><div class="caption">car.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/river.png"/><div class="caption">river.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/server.png"/><div class="caption">server.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/letterbox.png"/><div class="caption">letterbox.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/wateringcan.png"/><div class="caption">wateringcan.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/toxic.png"/><div class="caption">toxic.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/dust.png"/><div class="caption">dust.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/workload.png"/><div class="caption">workload.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/battery.png"/><div class="caption">battery.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/oil.png"/><div class="caption">oil.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/radiation.png"/><div class="caption">radiation.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/paw.png"/><div class="caption">paw.png</div></div>

  		<div class="micon"><img src="/polestar/pub/icon/random.png"/><div class="caption">random.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/atom.png"/><div class="caption">atom.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/probe.png"/><div class="caption">probe.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/plant.png"/><div class="caption">plant.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/wireless.png"/><div class="caption">wireless.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/disk.png"/><div class="caption">disk.png</div></div>
  		<div class="micon"><img src="/polestar/pub/icon/financial.png"/><div class="caption">financial.png</div></div>
  	</div>
	
	
	<h3>Working with scripts</h3>
	<p>Polestar is completely configured and customised through the use of scripts. Scripts are
	code snippets in the <a href="http://groovy.codehaus.org/">Groovy</a> programming language.
	Scripts are used, as we have seen, to configure sensors, but also for updating the state of
	those sensors, driving actions based on the sensor states, creating visualizations of the 
	current and historical sensor state.</p>
	
	<p>Each script has the following fields:</p>
	<ul>
		<li><b>Id</b> each script is assigned a unique id when it is created, you cannot change this.</li>
		<li><b>Name</b> the display name of the script.</li>
		<li><b>Triggers</b> the triggers field is primarily a comma separated list of sensor ids. When any of the listed
		sensors change the script will be executed automatically. In addition to sensor ids the following
		values are supported:<ul>
			<li><span class="label label-success">error</span> execute script when a new error is reported by any sensor.</li>
			<li><span class="label label-success">startup</span> execute script when Polestar is started.</li>
			<li><span class="label label-success">shutdown</span> execute script before Polestar is stopped.</li>
		</ul>
		</li>
		<li><b>Keywords</b> the keywords field is a comma separated list of keywords that are displayed in the script list and can be used to filter scripts.</li>
		<li><b>Periodicity</b> selecting a value other than none here will cause the script to be automatically called periodically.</li>
		<li><b>Target</b> a sensor to update with response. See <a href="#ondemand">on-demand sensors</a> below.</li>
		<li><b>Access</b> by default a script is private and can only be executed internally, either triggered or from another script, or manually by admin.
		Change to guest to allow guest user to execute too. Change to public to make this script executable without authentication.
		(For this to work you need to change the "execute" in the path to "webhook".)
		This is useful for providing "webhooks" for updating of sensors by external systems. If a script is marked as secret then the guest
		user can neither execute or view the script.</li>
		<li><b>Code</b> the code field contains the source code for the script written in the Groovy programming language.</li>
	</ul>
	
	<h3>Script context</h3>
	<p>Every script gets passed a variable called context. The context gives access to all the polestar and NetKernel functionality
	for more details of the API see the <a href="https://polestar.io/javadoc/index.html">Javadoc</a>.
	</p>
	
	
	<h3>Script connectivity</h3>
	<p>There are a number of services made available for the use of scripts. These will be documented
	in the given examples. In addition you can issue web requests for data and create additional NetKernel modules with
	services that connect to external hardware devices.</p>
	<h4>Issuing a web request for data</h4>
	<pre><code>import org.netkernel.mod.hds.*;
url="http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=INORTHYA1";
doc=context.source(url, IHDSDocument.class).getReader();
outdoor=Float.parseFloat((String)doc.getFirstValue("/current_observation/temp_c"));</code></pre>

	<div class="alert alert-info">
		<p><b>Connecting to self signed HTTPS servers</b></p>
		<p>Self signed servers are very useful because you can avoid the complexity of setting up real certificates for your servers
		and yet still have an encryped connection. However by default Java doesn't allow you to connect to self signed servers.
		Here is a simple solution, Polestar has an alternate connection manager to allow this:</p>
		<code><pre>
req=context.createRequest("active:httpGet");
req.addArgument("url","https://selfsigned.io/polestar/scripts/execute/A476535511DE78B7");
req.addArgument("connectionManager", "active:polestarSelfSignedConnectionManager");
representation=context.issueRequest(req);	
		</pre></code>
	</div>

	<h4>Adding hardware connectivity through NetKernel modules</h4>
	<p>Polestar will import any spaces which make exports available with the type "Polestar" using the <a href="http://docs.netkernel.org/book/view/book:layer1:book/doc:layer1:accessors:sid">dynamic import hook</a>
	mechanism. Once the spaces are imported you can issue requests to the services within from your scripts.
	</p>
	<h3>Sensor update script</h3>
	<p>Sensors are typically updated on a periodic basis using a script by either specifying a periodicity
	or by making a script public
	and allowing an external system to execute the script passing in data. This is called a webhook. Let us have a look at examples of these two approaches.
	Although these examples show only one sensor multiple sensors can be updated by adding more sensor updates into the
	update document.
	</p>
	<p>First we need to create a sensor to work with so edit your "SensorList" script and add the following sensor definition:
	<pre><code>m.pushNode("sensor").addNode("id","urn:exampleSensor").addNode("name","Example Sensor").popNode();</code></pre>
	</p>
	<h4>Polled sensor script</h4>
	<p>Create a new script and set a periodicity of 30 seconds. Add the following code:
	<pre><code>import io.polestar.api.*;
value=Math.random();
context.setSensorValue("urn:exampleSensor",value);
</code></pre>
	This script will run every 30 seconds and update this single sensor with a random number between 0 and 1.
	</p>
	<h4>Webhook sensor script</h4>
	<p>Create a new script, leave the trigger field blank but check the "public" checkbox. Add the following code:
	<pre><code>import org.netkernel.mod.hds.*;
import org.netkernel.layer0.nkf.*;

queryParam=context.source("httpRequest:/param/value",String.class);
if (queryParam!=null)
{	value=Double.parseDouble(queryParam);
	context.createResponseFrom("sensor updated").setExpiry(INKFResponse.EXPIRY_ALWAYS);
	context.setSensorValue("urn:exampleSensor",value);
}</code></pre>
	To update the value we now need to issue a web request to the script. So for example if our script has an id of
	EAC75E961241D889 then we can issue the following request in our web browser addressbar
	<kbd>http://localhost:8080/polestar/scripts/execute/EAC75E961241D889?value=1.0</kbd>.
	</p>
	<h4>Registering errors on sensors</h4>
	<p>Sensors can report an error automatically if you specify an "errorIfNoReadingsFor" value in the sensor definition
	however sometimes it is desirable to report a specific error directly if one is known. Here is an example based on the
	polled random number example above which will report an error if the random number is above 0.95.</p>
	<pre><code>import org.netkernel.layer0.nkf.*;
value=Math.random();
context.setSensorValue("urn:exampleSensor",value);
if (value>0.95)
	context.setSensorError("urn:exampleSensor","Value is too large");
else
	context.setSensorError("urn:exampleSensor",null);
</code></pre>
	<h3>Control scripts</h3>
	<p>Control scripts are used to make decisions and take actions based upon the state of sensors.
	For example turning on/off lights, sending messages or sounding alarms. Control scripts can
	be triggered periodically or, for more immediate action, when sensors that effect it's outcome
	change.</p>
	<p>Control scripts usual want to read the current state of sensors, detect changes and them perform
	actions or update further "logical" sensors.</p>
	<p>Here is an example of reading sensor values:
	<pre><code>import org.netkernel.layer0.nkf.*;

//example of using the value and last modified time of a sensor
atHome=context.getSensorValue("urn:atHome");
lastAtHome=context.getSensorLastModified("urn:atHome");
now=System.currentTimeMillis();
if (atHome &amp;&amp; now-lastAtHome&gt;24*60*60*1000)
{	context.logRaw(INKFLocale.WARNING,"Did you know you really need to get out more?");
}</code></pre></p>

	<h4>booleanChangeDetect</h4>
	<p>The problem with the above script is that after 24 hours of being at home you will be
	warned everytime the script is run. Usually you determine a condition and then act when that
	condition becomes true or stops being true. To do this we need to remember state to know
	the state of the condition last time the script ran.
	<pre><code>import org.netkernel.layer0.nkf.*;

//example of using the value and last modified time of a sensor
atHome=context.getSensorValue("urn:atHome");
lastAtHome=context.getSensorLastModified("urn:atHome");
now=System.currentTimeMillis();
atHomeToLong=atHome &amp;&amp; now-lastAtHome&gt;24*60*60*1000;
status=context.booleanChangeDetect(atHomeToLong,0,0,"atHomeToLong");
changed=status[1];
if (changed &amp;&amp; atHomeToLong)	
{	context.logRaw(INKFLocale.LEVEL_INFO,"Did you know you really need to get out more?");
}</code></pre></p>
	
	<h4>analogueChangeDetect</h4>
	<p>There is also the analogue equivalent of booleanChangeDetect() called
	analogueChangeDetect(). It works in a similar way but looks for a numeric value
	to be above a trigger level for the condition to become true.
	<pre><code>import org.netkernel.layer0.nkf.*;

light=context.getSensorValue("urn:daylight:db");
status=context.analogueChangeDetect(light, -55.0D, -50.0D, "light");
changed=status[1];
isDay=status[0];
if (changed)
{	if (isDay)
	{	context.logRaw(INKFLocale.LEVEL_INFO,"Dawn");
	}
	else
	{	context.logRaw(INKFLocale.LEVEL_INFO,"Dusk");
	}
}</code></pre></p>
	
	
	<h4>atMostEvery</h4>
	<p>Sometimes it is useful to stop a particular action from happening too often.
	For example my kids love to press the door bell about 10 times but if I'm not
	at home I only want to be send a message if the door bell rings for the first time
	in 5 minutes.
	<pre><code>import org.netkernel.mod.hds.*;
import org.netkernel.layer0.nkf.*;

boolean requireQuiet=true; // timer resets everytime bell is rung
newEvent=context.atMostEvery(period: 300000L, requireQuiet, "bell");

if (newEvent)
{	context.logRaw(INKFLocale.LEVEL_INFO,"This might actually be a new person ringing");
}</code></pre></p>
	
	
	<h4>Script persistent state</h4>
	<p>In these examples above atMostEvery, analogueChangeDetect, and booleanChangeDetect all
	require state to be stored between invocations in order to function. Each script maintains a
	state resource automatically between invocations.</p>
	
	<p>You can access values from that state easily using the API:
	<pre><code>default=0L;
value=context.getScriptState("myVar",default)
value+=1;
context.setScriptState("myVar",value);</code></pre></p>
	
	<p>You can also access the scripts persistent state directly as a HDS document:
	<pre><code>import org.netkernel.layer0.nkf.*;
import org.netkernel.mod.hds.*;

state=context.source("arg:state",IHDSDocument.class).getMutableClone();
count=state.getFirstValueOrNull("/state/count");
if (count==null)
	count=0;
else
	count++;
state.createIfNotExists("state/count").setValue(count);
context.sink("arg:state",state.toDocument(true));
resp=context.createResponseFrom(state.toString());
resp.setExpiry(INKFResponse.EXPIRY_ALWAYS);</code></pre></p>

	
	
	<h4>Calling other scripts</h4>
	<p>One script can call another script. This is useful for generic services such as sending a message.
	You can pass arbitrary arguments between scripts:
	<pre><code>result=context.callScriptById("47CCD102175BC395",
	"argument1","abc"
);</code></pre>
	You can also reference scripts by their name as well as their id:
	<pre><code>result=context.callScriptByName("Send Message",
	"message","something happened"
);</code></pre>
	The called script can access the argument:
	<pre><code>argument1=context.source("arg:argument1");</code></pre> 
	</p>
	<h4>Logging</h4>
	<p>Scripts can write to the log:
	<pre><code>import org.netkernel.layer0.nkf.*;
context.logRaw(INKFLocale.LEVEL_INFO,"Something happened");
context.logRaw(INKFLocale.LEVEL_WARNING,"Something bad happened");</code></pre>
	</p>
	
	<h3>Homepage script</h3>
	<p>To customize the homepage create a script which returns XHTML with the name "Homepage". You can use this
	page to put visualizations or status icons.</p>
	<pre><code><![CDATA[import org.netkernel.layer0.nkf.*;
s="""&lt;div class='container'&gt;
&lt;iframe src="/polestar/scripts/execute/287CB3EAD99CA3A6" frameborder="0" width="280" height="160" scrolling="no"&gt;_&lt;/iframe&gt;
&lt;/div&gt;""";

resp=context.createResponseFrom(s.toString());
resp.setHeader("polestar_wrap",true);
	]]></code></pre>
	
	<h3 id="ondemand">On Demand Sensors</h3>
	<p>On demand sensors are sensors which are updated by scripts when they are queried. Maybe the term sensor is being stretched a bit far.
	These sensors represent a single value over time and it's value is usually defined from data available in other sensors. For example we
	could define an on-demand sensor for maximum temperature in day. This sensor will update at midnight each day with a value of the maximum temperature
	over that day. So typical these sensors provide aggregated higher level data. 
	</p>
	<p>To define an on demand sensor define a sensor in the Sensors script as usual (see above.) Then create a script which will update the sensor.
	This script should have a periodicity of how often the sensor should update and target of the on-demand sensor. The script will receive a timestamp
	argument of a Long millisecond timestamp when it is called. It should return a single sensor value as it's response.
	</p>
	
	
	<h3>Backup/Restore</h3>
	<p>You can backup and restore all the scripts through the 
	<button class="btn btn-default" title="backup"><span class="glyphicon glyphicon-cloud-download"></span></button>
	and	<button class="btn btn-default" title="restore"><span class="glyphicon glyphicon-cloud-upload"></span></button>
	buttons on the headerbar of the script list (only available on desktop not mobile.) 
	</p>
	
	<h3>Inhibit Polling</h3>
	<p>I've noticed that restarting polestar after significant hardware changes can lead to a lockup because the polling continues to happen
	and with delays such as connecting to hardward or networking timouts the requests get backlogged to a degree that recovery and editing of
	scripts is impossible. To workaround this there is a java system property that can be set at boot time which inhibits all polling scripts
	from automatically executing. Add the following to [install]/bin/jvmsettings.cnf</p>
	<code>-Dpolestar.inhibitPolling=true</code>
	
</div>